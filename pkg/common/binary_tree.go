// These codes are generated by AI, I'm still new to go, some syntax I don't know yet :/
package common

import "fmt"

type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func CreateTree(arr []*int) *TreeNode {
	if len(arr) == 0 || arr[0] == nil {
		return nil
	}

	root := &TreeNode{Val: *arr[0]}
	queue := []*TreeNode{root}
	i := 1

	for len(queue) > 0 && i < len(arr) {
		node := queue[0]
		queue = queue[1:]

		// Left child
		if i < len(arr) && arr[i] != nil {
			node.Left = &TreeNode{Val: *arr[i]}
			queue = append(queue, node.Left)
		}
		i++

		// Right child
		if i < len(arr) && arr[i] != nil {
			node.Right = &TreeNode{Val: *arr[i]}
			queue = append(queue, node.Right)
		}
		i++
	}

	return root
}

func TreeToSlice(root *TreeNode) []*int {
	if root == nil {
		return []*int{}
	}

	result := []*int{}
	queue := []*TreeNode{root}

	for len(queue) > 0 {
		node := queue[0]
		queue = queue[1:]

		if node == nil {
			result = append(result, nil)
		} else {
			result = append(result, &node.Val)
			queue = append(queue, node.Left)
			queue = append(queue, node.Right)
		}
	}

	// Remove trailing nils
	for len(result) > 0 && result[len(result)-1] == nil {
		result = result[:len(result)-1]
	}

	return result
}

// Helper function to create int pointers
func IntPtr(val int) *int {
	return &val
}

func PrintTree(root *TreeNode) {
	if root == nil {
		fmt.Println("(empty tree)")
		return
	}

	printTreeHelper(root, "", true)
}

func printTreeHelper(node *TreeNode, prefix string, isLast bool) {
	if node == nil {
		return
	}

	// Print current node
	connector := "├── "
	if isLast {
		connector = "└── "
	}
	fmt.Printf("%s%s%d\n", prefix, connector, node.Val)

	// Prepare prefix for children
	var childPrefix string
	if isLast {
		childPrefix = prefix + "    "
	} else {
		childPrefix = prefix + "│   "
	}

	// Print children
	if node.Left != nil || node.Right != nil {
		if node.Left != nil {
			printTreeHelper(node.Left, childPrefix, node.Right == nil)
		} else if node.Right != nil {
			// If left is nil but right exists, print nil for left
			fmt.Printf("%s├── nil\n", childPrefix)
		}

		if node.Right != nil {
			printTreeHelper(node.Right, childPrefix, true)
		} else if node.Left != nil {
			// If right is nil but left exists, print nil for right
			fmt.Printf("%s└── nil\n", childPrefix)
		}
	}
}
